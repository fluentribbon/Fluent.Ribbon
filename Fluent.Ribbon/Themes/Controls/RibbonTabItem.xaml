<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Fluent="clr-namespace:Fluent"
                    xmlns:converters="clr-namespace:Fluent.Converters"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">
    <ControlTemplate x:Key="Fluent.Ribbon.Templates.RibbonTabItem"
                     TargetType="{x:Type Fluent:RibbonTabItem}">
        <Grid x:Name="grid">
            <Border x:Name="groupBorder"
                    Margin="0 0 0 1"
                    Background="{Binding Group.Background, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Transparent}"
                    BorderThickness="0"
                    OpacityMask="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Contextual.Background.OpacityMask}" />
            <Border x:Name="backgroundBorder"
                    Background="{TemplateBinding Background}"
                    BorderThickness="0" />
            <Border x:Name="underlineContainerBorder"
                    Margin="0 0 0 3"
                    Background="{TemplateBinding ActiveTabBackground}"
                    Visibility="Collapsed">
                <Border x:Name="underlineBorder"
                        Margin="{Binding HeaderPadding, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:ExtractLeftRightFromThicknessConverter.Default}}"
                        BorderBrush="{TemplateBinding ActiveTabBorderBrush}"
                        BorderThickness="{DynamicResource Fluent.Ribbon.Values.RibbonTabItem.Active.BorderThickness}"
                        Visibility="Collapsed" />
            </Border>

            <Border x:Name="PART_ContentContainer"
                    Padding="{TemplateBinding HeaderPadding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch">
                <ContentControl x:Name="PART_HeaderContentHost"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                Focusable="False" />
            </Border>

            <Grid x:Name="separatorGrid"
                  Width="1"
                  Margin="0 4 0 4"
                  HorizontalAlignment="Right"
                  Opacity="{TemplateBinding SeparatorOpacity}">
                <Rectangle Width="1"
                           Fill="{DynamicResource Fluent.Ribbon.Brushes.Separator.Background}"
                           Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.Border}" />
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsContextual" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Border}" />
            </Trigger>
            <Trigger Property="IsContextual" Value="True">
                <Setter Property="Foreground" Value="{Binding Group.TabItemForeground, RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Fluent:RibbonProperties.MouseOverForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.MouseOver.Foreground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_ContentContainer" Property="Opacity" Value="0.5" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Fluent:RibbonTabControl}, Path=SelectedItem}" Value="{x:Null}">
                <Setter TargetName="groupBorder" Property="Margin" Value="0" />
            </DataTrigger>
            <Trigger Property="Group" Value="{x:Null}">
                <Setter TargetName="groupBorder" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="underlineBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Gray2}" />
                <Setter TargetName="underlineBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="underlineContainerBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter TargetName="underlineBorder" Property="BorderBrush" Value="{Binding ActiveTabBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="underlineBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="underlineContainerBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <!-- Foreground for Selected, with group -->
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{Binding Group.TabItemSelectedForeground, RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <!-- Foreground for selected, no group -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Selector.IsSelected" Value="True" />
                    <Condition Property="IsContextual" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground}" />
            </MultiTrigger>
            <!-- Background and foreground for MouseOver, with group -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsVisible" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition SourceName="grid" Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(Fluent:RibbonProperties.MouseOverBackground), RelativeSource={RelativeSource Self}}" />
                <Setter Property="Foreground" Value="{Binding Group.TabItemMouseOverForeground, RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <!-- Foreground for selected MouseOver, with group -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsVisible" Value="True" />
                    <Condition Property="Selector.IsSelected" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition SourceName="grid" Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Group.TabItemSelectedMouseOverForeground, RelativeSource={RelativeSource Self}}" />
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="beginStoryboardSelectedMouseOver">
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="underlineBorder"
                                                Storyboard.TargetProperty="Margin"
                                                To="0"
                                                Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="underlineBorder"
                                                Storyboard.TargetProperty="Margin"
                                                Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <!-- Background and foreground for MouseOver, no group -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsVisible" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition SourceName="grid" Property="IsMouseOver" Value="True" />
                    <Condition Property="Group" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(Fluent:RibbonProperties.MouseOverBackground), RelativeSource={RelativeSource Self}}" />
                <Setter Property="Foreground" Value="{Binding Path=(Fluent:RibbonProperties.MouseOverForeground), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="Fluent.Ribbon.Styles.RibbonTabItem"
           TargetType="{x:Type Fluent:RibbonTabItem}">
        <Setter Property="ActiveTabBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Active.Background}" />
        <Setter Property="ActiveTabBorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Border}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Border}" />
        <Setter Property="Fluent:RibbonProperties.MouseOverBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.MouseOver.Background}" />
        <Setter Property="Fluent:RibbonProperties.MouseOverForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.MouseOver.Foreground}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Fluent.Ribbon.Styles.FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Foreground}" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <!-- Hidden TextBlock is used to prevent width differences due to FontWeight changes when item is selected -->
                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontWeight="Bold"
                                   Text="{Binding}"
                                   TextWrapping="NoWrap"
                                   Visibility="Hidden" />

                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Text="{Binding}"
                                   TextWrapping="NoWrap">
                            <TextBlock.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=Fluent:RibbonTabItem}}" Value="True">
                                            <Setter Property="TextElement.FontWeight" Value="Bold" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.Templates.RibbonTabItem}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsContextual, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Group.Visibility, RelativeSource={RelativeSource Self}}" Value="Collapsed" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>